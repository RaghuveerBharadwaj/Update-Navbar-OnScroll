{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","headerTabs","selectedHeaderTab","value","this","setState","window","onscroll","map","item","bounding","document","getElementById","getBoundingClientRect","top","bottom","className","tab","tabI","key","href","onClick","handleHeaderTabs","id","Component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mPAwEeA,G,MArEf,2MACEC,MAAQ,CACNC,WAAY,CAAC,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,SAC5EC,kBAAmB,SAHvB,gFAKmBC,GACfC,KAAKC,SAAS,CAAEH,kBAAmBC,MANvC,0CAQwB,IAAD,OACnBG,OAAOC,SAAW,WAChB,EAAKP,MAAMC,WAAWO,IAAI,SAAAC,GAExB,IAAIC,EAAWC,SAASC,eAAeH,GAAMI,wBACzCH,EAASI,KAAO,GAAKJ,EAASK,QAAU,KAC1C,EAAKV,SAAS,CAAEH,kBAAmBO,SAd7C,+BAmBY,IAAD,OACP,OACE,6BACE,yBAAKO,UAAU,eACZZ,KAAKJ,MAAMC,WAAWO,IAAI,SAACS,EAAKC,GAAN,OACvB,uBAAGC,IAAKD,EAAME,KAAM,IAAM,EAAKpB,MAAME,mBACnC,4BACEc,UAAWC,IAAQ,EAAKjB,MAAME,kBAAoB,aAAe,MACjEmB,QAAS,WAAO,EAAKC,iBAAiBL,KACnCA,OAKb,yBAAKD,UAAU,aACZZ,KAAKJ,MAAMC,WAAWO,IAAI,SAAAS,GAAG,OAC9B,yBAAKE,IAAKF,GACR,wBAAIM,GAAIN,EAAKD,UAAU,UACvB,6BAAK,2BAAI,IAAIC,IACb,2nBAKA,mmBAKA,grBAKA,ofAIA,mnBAzDZ,GAAyBO,cCSLC,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnB,SAASC,eAAe,SD2H3C,kBAAmBmB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.bcea6f93.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n\nexport class App extends Component {\n  state = {\n    headerTabs: ['TAB 1', 'TAB 2', 'TAB 3', 'TAB 4', 'TAB 5', 'TAB 6', 'TAB 7', 'TAB 8'],\n    selectedHeaderTab: 'TAB 1'\n  }\n  handleHeaderTabs(value) {\n    this.setState({ selectedHeaderTab: value })\n  }\n  componentDidMount () {\n    window.onscroll = () => {\n      this.state.headerTabs.map(item =>\n      {\n        let bounding = document.getElementById(item).getBoundingClientRect()\n        if (bounding.top >= 0 && bounding.bottom <= 200) {\n          this.setState({ selectedHeaderTab: item })\n        }\n      })\n    }\n  }\n  render() {\n    return (\n      <div>\n        <div className='header-tabs'>\n          {this.state.headerTabs.map((tab, tabI) => (\n              <a key={tabI} href={'#' + this.state.selectedHeaderTab}>\n                <button\n                  className={tab === this.state.selectedHeaderTab ? 'tab active' : 'tab'}\n                  onClick={() => {this.handleHeaderTabs(tab)}}>\n                    {tab}\n                </button>\n              </a>\n          ))}\n        </div>\n        <div className='divisions'>\n          {this.state.headerTabs.map(tab => \n          <div key={tab}>\n            <hr id={tab} className='space' />\n            <div><b>{'#'+tab}</b></div>\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam tincidunt lorem ac urna finibus, vel consectetur nisl consectetur.\n              In mollis augue quis fringilla dapibus. Ut sodales quam tellus, non convallis nisi facilisis eget. Mauris tortor arcu, maximus id \n              augue ac, gravida aliquam metus. Mauris faucibus, urna eu venenatis facilisis, velit enim placerat ipsum, vel placerat mi arcu ut \n              massa. Nulla accumsan odio viverra augue fermentum, id vulputate urna pharetra. Suspendisse laoreet pretium mollis. Fusce tristique\n               consectetur euismod. Nam dolor neque, elementum at massa et, posuere egestas urna.</p>\n            <p>Etiam consequat augue erat, a ultricies ipsum feugiat ut. Etiam porta pellentesque ante, eu hendrerit quam scelerisque ac. Phasellus\n               nec libero ac enim sagittis pharetra at in leo. Praesent ac est lacus. Maecenas quis urna eget diam tristique fringilla nec eget \n               sapien. Fusce venenatis, massa tempor sollicitudin consectetur, massa nibh lacinia eros, ac vehicula est massa non urna. Praesent et\n                quam tincidunt, consectetur augue quis, pretium magna. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere\n                 cubilia Curae; Donec auctor ex et erat blandit venenatis.</p>\n            <p>Nullam pretium ullamcorper tristique. Mauris accumsan tortor a dictum fermentum. Nulla ex metus, auctor quis fringilla nec, malesuada\n               sed urna. Quisque non pretium justo. Mauris in ullamcorper arcu. Phasellus pretium sollicitudin mauris ut interdum. Vestibulum ante\n                ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Donec a tempus ante. Vivamus dolor odio, porttitor lacinia \n                tellus vitae, tristique accumsan turpis. Cras ut dolor accumsan, dignissim justo sit amet, convallis mauris. Nullam facilisis laoreet\n                 feugiat. Aliquam ac odio et ex aliquet ullamcorper a in lorem. Donec feugiat nibh id arcu maximus, eget luctus lacus pharetra.</p>\n            <p>Nunc et leo urna. Phasellus molestie imperdiet ante eu posuere. Nunc imperdiet blandit lectus, in consectetur enim blandit sit amet.\n               Vivamus posuere quis lectus ac pretium. Pellentesque arcu justo, posuere at rutrum at, viverra eu arcu. Curabitur non nibh id mauris \n               aliquam gravida. Curabitur facilisis augue eros, eu efficitur risus faucibus et. Vestibulum commodo sapien a enim mollis laoreet. \n               Aliquam erat volutpat. Etiam porta interdum mollis. Sed ut lobortis eros.</p>\n            <p>Integer et nisi a tortor ornare pulvinar. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; \n              Nullam vel metus interdum erat varius volutpat. Vestibulum elementum ipsum quis metus ornare finibus. Mauris euismod eu felis eget \n              placerat. Aenean pulvinar dui vitae sapien aliquet, sit amet commodo leo euismod. Nunc dolor magna, iaculis in augue bibendum, ornare\n               vestibulum orci. Fusce et ligula vitae sapien finibus pretium. Etiam suscipit, est ut molestie tincidunt, risus elit molestie ipsum,\n                at facilisis diam tortor eget nisl. Donec eget neque dolor.</p>\n          </div>)}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}